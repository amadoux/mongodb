package com.myapp.mongodb.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class AbsenceAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAllPropertiesEquals(Absence expected, Absence actual) {
        assertAbsenceAutoGeneratedPropertiesEquals(expected, actual);
        assertAbsenceAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAllUpdatablePropertiesEquals(Absence expected, Absence actual) {
        assertAbsenceUpdatableFieldsEquals(expected, actual);
        assertAbsenceUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceAutoGeneratedPropertiesEquals(Absence expected, Absence actual) {
        assertThat(expected)
            .as("Verify Absence auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceUpdatableFieldsEquals(Absence expected, Absence actual) {
        assertThat(expected)
            .as("Verify Absence relevant properties")
            .satisfies(e -> assertThat(e.getStartDate()).as("check startDate").isEqualTo(actual.getStartDate()))
            .satisfies(e -> assertThat(e.getEndDate()).as("check endDate").isEqualTo(actual.getEndDate()))
            .satisfies(e -> assertThat(e.getNumberDayAbsence()).as("check numberDayAbsence").isEqualTo(actual.getNumberDayAbsence()))
            .satisfies(e -> assertThat(e.getTypeAbsence()).as("check typeAbsence").isEqualTo(actual.getTypeAbsence()))
            .satisfies(
                e -> assertThat(e.getConfirmationAbsence()).as("check confirmationAbsence").isEqualTo(actual.getConfirmationAbsence())
            )
            .satisfies(e -> assertThat(e.getCongeRestant()).as("check congeRestant").isEqualTo(actual.getCongeRestant()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertAbsenceUpdatableRelationshipsEquals(Absence expected, Absence actual) {
        assertThat(expected)
            .as("Verify Absence relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
