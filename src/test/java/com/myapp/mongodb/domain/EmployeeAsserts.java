package com.myapp.mongodb.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class EmployeeAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllPropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeAutoGeneratedPropertiesEquals(expected, actual);
        assertEmployeeAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAllUpdatablePropertiesEquals(Employee expected, Employee actual) {
        assertEmployeeUpdatableFieldsEquals(expected, actual);
        assertEmployeeUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeAutoGeneratedPropertiesEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableFieldsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relevant properties")
            .satisfies(e -> assertThat(e.getFirstName()).as("check firstName").isEqualTo(actual.getFirstName()))
            .satisfies(e -> assertThat(e.getLastName()).as("check lastName").isEqualTo(actual.getLastName()))
            .satisfies(e -> assertThat(e.getEmail()).as("check email").isEqualTo(actual.getEmail()))
            .satisfies(e -> assertThat(e.getPhoneNumber()).as("check phoneNumber").isEqualTo(actual.getPhoneNumber()))
            .satisfies(e -> assertThat(e.getIdentityCard()).as("check identityCard").isEqualTo(actual.getIdentityCard()))
            .satisfies(e -> assertThat(e.getDateInspiration()).as("check dateInspiration").isEqualTo(actual.getDateInspiration()))
            .satisfies(e -> assertThat(e.getNationality()).as("check nationality").isEqualTo(actual.getNationality()))
            .satisfies(e -> assertThat(e.getUploadIdentityCard()).as("check uploadIdentityCard").isEqualTo(actual.getUploadIdentityCard()))
            .satisfies(
                e ->
                    assertThat(e.getUploadIdentityCardContentType())
                        .as("check uploadIdentityCard contenty type")
                        .isEqualTo(actual.getUploadIdentityCardContentType())
            )
            .satisfies(e -> assertThat(e.getTypeEmployed()).as("check typeEmployed").isEqualTo(actual.getTypeEmployed()))
            .satisfies(e -> assertThat(e.getCityAgency()).as("check cityAgency").isEqualTo(actual.getCityAgency()))
            .satisfies(e -> assertThat(e.getResidenceCity()).as("check residenceCity").isEqualTo(actual.getResidenceCity()))
            .satisfies(e -> assertThat(e.getAddress()).as("check address").isEqualTo(actual.getAddress()))
            .satisfies(
                e -> assertThat(e.getSocialSecurityNumber()).as("check socialSecurityNumber").isEqualTo(actual.getSocialSecurityNumber())
            )
            .satisfies(e -> assertThat(e.getBirthDate()).as("check birthDate").isEqualTo(actual.getBirthDate()))
            .satisfies(e -> assertThat(e.getBirthPlace()).as("check birthPlace").isEqualTo(actual.getBirthPlace()))
            .satisfies(e -> assertThat(e.getEntryDate()).as("check entryDate").isEqualTo(actual.getEntryDate()))
            .satisfies(e -> assertThat(e.getReleaseDate()).as("check releaseDate").isEqualTo(actual.getReleaseDate()))
            .satisfies(e -> assertThat(e.getWorkstation()).as("check workstation").isEqualTo(actual.getWorkstation()))
            .satisfies(
                e ->
                    assertThat(e.getDescriptionWorkstation())
                        .as("check descriptionWorkstation")
                        .isEqualTo(actual.getDescriptionWorkstation())
            )
            .satisfies(e -> assertThat(e.getDepartment()).as("check department").isEqualTo(actual.getDepartment()))
            .satisfies(e -> assertThat(e.getLevel()).as("check level").isEqualTo(actual.getLevel()))
            .satisfies(e -> assertThat(e.getCoefficient()).as("check coefficient").isEqualTo(actual.getCoefficient()))
            .satisfies(e -> assertThat(e.getNumberHours()).as("check numberHours").isEqualTo(actual.getNumberHours()))
            .satisfies(e -> assertThat(e.getAverageHourlyCost()).as("check averageHourlyCost").isEqualTo(actual.getAverageHourlyCost()))
            .satisfies(e -> assertThat(e.getMonthlyGrossAmount()).as("check monthlyGrossAmount").isEqualTo(actual.getMonthlyGrossAmount()))
            .satisfies(e -> assertThat(e.getCommissionAmount()).as("check commissionAmount").isEqualTo(actual.getCommissionAmount()))
            .satisfies(e -> assertThat(e.getContractType()).as("check contractType").isEqualTo(actual.getContractType()))
            .satisfies(e -> assertThat(e.getSalaryType()).as("check salaryType").isEqualTo(actual.getSalaryType()))
            .satisfies(e -> assertThat(e.getHireDate()).as("check hireDate").isEqualTo(actual.getHireDate()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertEmployeeUpdatableRelationshipsEquals(Employee expected, Employee actual) {
        assertThat(expected)
            .as("Verify Employee relationships")
            .satisfies(e -> assertThat(e.getEnterprise()).as("check enterprise").isEqualTo(actual.getEnterprise()))
            .satisfies(e -> assertThat(e.getManagerEmployee()).as("check managerEmployee").isEqualTo(actual.getManagerEmployee()));
    }
}
