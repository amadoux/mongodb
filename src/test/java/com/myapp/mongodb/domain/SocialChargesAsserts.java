package com.myapp.mongodb.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SocialChargesAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialChargesAllPropertiesEquals(SocialCharges expected, SocialCharges actual) {
        assertSocialChargesAutoGeneratedPropertiesEquals(expected, actual);
        assertSocialChargesAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialChargesAllUpdatablePropertiesEquals(SocialCharges expected, SocialCharges actual) {
        assertSocialChargesUpdatableFieldsEquals(expected, actual);
        assertSocialChargesUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialChargesAutoGeneratedPropertiesEquals(SocialCharges expected, SocialCharges actual) {
        assertThat(expected)
            .as("Verify SocialCharges auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialChargesUpdatableFieldsEquals(SocialCharges expected, SocialCharges actual) {
        assertThat(expected)
            .as("Verify SocialCharges relevant properties")
            .satisfies(e -> assertThat(e.getSpentDate()).as("check spentDate").isEqualTo(actual.getSpentDate()))
            .satisfies(e -> assertThat(e.getSpentType()).as("check spentType").isEqualTo(actual.getSpentType()))
            .satisfies(e -> assertThat(e.getStatusCharges()).as("check statusCharges").isEqualTo(actual.getStatusCharges()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCommentText()).as("check commentText").isEqualTo(actual.getCommentText()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSocialChargesUpdatableRelationshipsEquals(SocialCharges expected, SocialCharges actual) {
        assertThat(expected)
            .as("Verify SocialCharges relationships")
            .satisfies(e -> assertThat(e.getResponsableDepense()).as("check responsableDepense").isEqualTo(actual.getResponsableDepense()))
            .satisfies(e -> assertThat(e.getEnterprise()).as("check enterprise").isEqualTo(actual.getEnterprise()));
    }
}
