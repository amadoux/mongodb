package com.myapp.mongodb.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class ContractAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllPropertiesEquals(Contract expected, Contract actual) {
        assertContractAutoGeneratedPropertiesEquals(expected, actual);
        assertContractAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAllUpdatablePropertiesEquals(Contract expected, Contract actual) {
        assertContractUpdatableFieldsEquals(expected, actual);
        assertContractUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractAutoGeneratedPropertiesEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableFieldsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relevant properties")
            .satisfies(e -> assertThat(e.getContractType()).as("check contractType").isEqualTo(actual.getContractType()))
            .satisfies(e -> assertThat(e.getEntryDate()).as("check entryDate").isEqualTo(actual.getEntryDate()))
            .satisfies(e -> assertThat(e.getReleaseDate()).as("check releaseDate").isEqualTo(actual.getReleaseDate()))
            .satisfies(e -> assertThat(e.getStatusContract()).as("check statusContract").isEqualTo(actual.getStatusContract()))
            .satisfies(e -> assertThat(e.getUploadContract()).as("check uploadContract").isEqualTo(actual.getUploadContract()))
            .satisfies(
                e ->
                    assertThat(e.getUploadContractContentType())
                        .as("check uploadContract contenty type")
                        .isEqualTo(actual.getUploadContractContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertContractUpdatableRelationshipsEquals(Contract expected, Contract actual) {
        assertThat(expected)
            .as("Verify Contract relationships")
            .satisfies(e -> assertThat(e.getEmployee()).as("check employee").isEqualTo(actual.getEmployee()));
    }
}
